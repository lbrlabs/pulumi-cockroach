// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApiOidcConfigIdentityMap {
    /**
     * The username (email or service account id) of the CC user that the token should map to.
     */
    ccIdentity: pulumi.Input<string>;
    /**
     * Indicates that the tokenPrincipal field is a regex value.
     */
    isRegex?: pulumi.Input<boolean>;
    /**
     * The token value that needs to be mapped.
     */
    tokenIdentity: pulumi.Input<string>;
}

export interface ClusterDedicated {
    diskIops?: pulumi.Input<number>;
    machineType?: pulumi.Input<string>;
    memoryGib?: pulumi.Input<number>;
    numVirtualCpus?: pulumi.Input<number>;
    privateNetworkVisibility?: pulumi.Input<boolean>;
    storageGib?: pulumi.Input<number>;
}

export interface ClusterRegion {
    internalDns?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    primary?: pulumi.Input<boolean>;
    sqlDns?: pulumi.Input<string>;
    uiDns?: pulumi.Input<string>;
}

export interface ClusterServerless {
    routingId?: pulumi.Input<string>;
    spendLimit?: pulumi.Input<number>;
    usageLimits?: pulumi.Input<inputs.ClusterServerlessUsageLimits>;
}

export interface ClusterServerlessUsageLimits {
    requestUnitLimit: pulumi.Input<number>;
    storageMibLimit: pulumi.Input<number>;
}

export interface CmekAdditionalRegion {
    internalDns?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    primary?: pulumi.Input<boolean>;
    sqlDns?: pulumi.Input<string>;
    uiDns?: pulumi.Input<string>;
}

export interface CmekRegion {
    key: pulumi.Input<inputs.CmekRegionKey>;
    region: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface CmekRegionKey {
    authPrincipal: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    uri: pulumi.Input<string>;
    userMessage?: pulumi.Input<string>;
}

export interface LogExportConfigGroup {
    channels: pulumi.Input<pulumi.Input<string>[]>;
    logName: pulumi.Input<string>;
    minLevel?: pulumi.Input<string>;
    redact?: pulumi.Input<boolean>;
}

export interface PrivateEndpointServicesService {
    aws?: pulumi.Input<inputs.PrivateEndpointServicesServiceAws>;
    /**
     * Cloud provider associated with this service.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Cloud provider region code associated with this service.
     */
    regionName?: pulumi.Input<string>;
    /**
     * Operation status of the service.
     */
    status?: pulumi.Input<string>;
}

export interface PrivateEndpointServicesServiceAws {
    /**
     * AZ IDs users should create their VPCs in to minimize their cost.
     */
    availabilityZoneIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server side ID of the PrivateLink connection.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * AWS service name used to create endpoints.
     */
    serviceName?: pulumi.Input<string>;
}

export interface UserRoleGrantsRole {
    resourceId?: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
    roleName: pulumi.Input<string>;
}
